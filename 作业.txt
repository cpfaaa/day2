split()：把字符串分割成字符串数组
indexOf()：从指定字符提取索引位置
append()：追加字符或字符串
trim()：去除字符串两端空格
replace()：替换
hashCode()：返回此字符串的哈希码
subString()：截取字符串
equals()：比较
length()：获取字符串的长度
valueOf()：转换为字符串
concat()：将指定字符串连接到此字符串的结尾
compareTo()：用来比较两个字符串的字典顺序
compareToIgnoreCase()：不考虑大小写,按字典顺序比较两个字符串
contains()： 检查一个字符串中是否包含想要查找的值

 Java里方法的重写和重载就是指的java里多态，重写就是父类与子类之间的多态，重载是在一个类中多态对的体现
(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载
(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写

这两个都是是Map接口下的实现类，我们开发的时候经常用的是HashMap虽然HashMap不是线程安全的但是他的存储效率比较高,Hashtable是线程安全我们看过他底层的put方法前面加的synchronized关键字,但是他的效率太低,我们开发很少用.为什么说hashTable是线程安全的?  因为看源码的时候里面的put方法前面加了synchronized关键字,什么情况下用hashMap? 我们有时候在自定义返回json字符串的时候,封装到List中进行返回.

Hashmap底层是通过数组和链接联合实现的，当我们创建hashmap时会先创建一个数组，当我们用put方法存数据时，先根据key的hashcode值计算出hash值，然后用这个哈希值确定在数组中的位置，再把value值放进去，如果这个位置本来没放东西，就会直接放进去，如果之前就有，就会生成一个链表，把新放入的值放在头部，当用get方法取值时，会先根据key的hashcode值计算出hash值，确定位置，再根据equals方法从该位置上的链表中取出该value值